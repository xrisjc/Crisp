///////////////////////////////////////////////////////////////////////////////
// File: Test.crisp
// Purpose: Integration testing of Crisp functionality that also serves as a
// guide to Crisp (for now).
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Code to manage running tests.
///////////////////////////////////////////////////////////////////////////////

let nTests = 0
let nErrors = 0
let showPassedTest = true


let displaySummary = fn () {
    write("\n", nTests - nErrors, " out of ", nTests, " tests passed.\n")
    write("There are ", nErrors, " errors. ")
    write(if nErrors == 0 { ":-)" } else { "D-:" }, "\n")
}

let pass = fn (message) {
    nTests = nTests + 1
    write("[OK] `", message, "`\n")
}

let fail = fn (message) {
    nTests = nTests + 1
    nErrors = nErrors + 1
    write("[FAILED] `", message, "`\n")
}

let assert = fn (condition, message) {
    if !condition {
        fail(message)
    } else if showPassedTest {
        pass(message)
	}
}

let assertEq = fn (actual, expected, message) {
    nTests = nTests + 1
    if actual != expected {
        write("[FAILED] ", message, ": expected `", expected, "` got `",
            actual, "`\n")
        nErrors = nErrors + 1
    } else if showPassedTest {
        write("[OK] ", message, "\n")
	}
}

//
// As you might have guessed, // starts a comment.  Comments are ignored and
// end when a new line character is reached.
//
// All other whitespace is ignored, so your free to format code as you see
// fit.
//

//
// Crisp is a dynamic language with where everything is an expression and all
// values are objects.
//

///////////////////////////////////////////////////////////////////////////////
// Basic Literals
///////////////////////////////////////////////////////////////////////////////

let testLiterals = fn () {
    // Crisp has literal expressions for numbers, strings, and Boolean values.

    // Strings are delimited by double quotes. They are the .NET string type
    // internally.
    assertEq("hi", "hi", "string literal")

    // All number values are .NET double (64 bit float) internally.
    assertEq(123, 123, "integer number literal")
    assertEq(1.5, 1.5, "fractional number literal")

    // Boolean values are given by keywords true and false representing the
    // obvious values.  They are the .NET bool type internally.
    assert(true, "true literal")
    assertEq(false, false, "false literal")

    // The keyword null evaluates to the null object value, which is a singleton
    // value that is not equal to any other value.
    assertEq(null, null, "null literal")
}

///////////////////////////////////////////////////////////////////////////////
// Operators
///////////////////////////////////////////////////////////////////////////////

let testOperators = fn () {
    // More complex expressions can be created with operators.

    // Crisp has the usual arithmetic operators `+`, `-`, `*`, `/`, and `%`.
    assertEq(1.0 + 2.5,  3.5, "addition")
    assertEq(5.5 - 2.0,  3.5, "subtraction")
    assertEq(2.5 * 3.0,  7.5, "multiplication")
    assertEq(12.5 % 5.0, 2.5, "modulo")
    assertEq(15.0 / 5.0, 3.0, "division #1")
    assertEq(1.0 / 2.0,  0.5, "division #2")
    assertEq(-0.5, 0.5-1.0, "negation")

    // The arithmetic operators have the usual precedence levels.
    assertEq(1 + 2 * 3,  7, "addition and multiplication")
    assertEq(10 - 2 * 3, 4, "subtraction and multiplication")
    assertEq(1 + 15 / 3, 6, "addition and division")
    assertEq(1 + 8 % 3,  3, "addition and modulo")
    assertEq(-2 + 4, 2, "leading negatives")

    // Grouping with parenthesis will change order of evaluation.
    assertEq((1 + 2) * 3,   9, "addition grouped and multiplication")
    assertEq((10 - 2) * 3, 24, "subtraction grouped and multiplication")

    // All relation operators evaluate to a boolean value.
    assertEq(1 == 1,          true, "int equality true")
    assertEq(1 == 2,         false, "int equality false")
    assertEq(1.5 == 1.5,      true, "float equality true")
    assertEq(1.5 == 2.0,     false, "float equality false")
    assertEq(false == false,  true, "bool equality true")
    assertEq(false == true , false, "bool equality false")
    assertEq("hey" == "hey",  true, "string equality true")
    assertEq("hey" == "HEY", false, "string equality false")

    // == is a strict equality operator. There are no conversions done.
    assertEq(false == 0, false, "false and zero are not equal")

    // null is equal to itself but not to other values.
    assert(null == null, "null equals itself")
    assertEq(null == 0, false, "null and zero are not equal")

    // != is the inequality operator
    assertEq(1 != 1,         false, "int inequality false")
    assertEq(1 != 2,          true, "int inequality true")
    assertEq(1.5 != 1.5,     false, "float inequality false")
    assertEq(1.5 != 2.0,      true, "float inequality true")
    assertEq(false != false, false, "bool inequality false")
    assertEq(false != true,   true, "bool inequality true")
    assertEq("hey" != "hey", false, "string inequality false")
    assertEq("hey" != "HEY",  true, "string inequality true")

    // != is also a strict inequality operator. There are no conversions done.
    assertEq(false != 0, true, "false and zero are inequal")

    // == and != are lower than arithmetic in precedence.
    assertEq(1  +  2 * 3 == 7, true, "= precedence")
    assertEq(1  +  2 * 3 != 9, true, "!= precedence")

    // There are also the normal relational operators.  These only work for
    // number valued objects.
    assertEq(1 < 2,   true, "Int less than #1")
    assertEq(2 < 2,  false, "Int less than #2")
    assertEq(1 <= 2,  true, "Int less than or equal #1")
    assertEq(2 <= 2,  true, "Int less than or equal #2")
    assertEq(3 <= 2, false, "Int less than or equal #3")
    assertEq(3 > 2,   true, "Int greater than #1")
    assertEq(1 > 2,  false, "Int greater than #2")
    assertEq(3 >= 2,  true, "Int greater than or equal #1")
    assertEq(3 >= 3,  true, "Int greater than or equal #2")
    assertEq(3 >= 4, false, "Int greater than or equal #3")

    assertEq(1.5 < 2.0,   true, "Float less than #1")
    assertEq(2.0 < 2.0,  false, "Float less than #2")
    assertEq(1.5 <= 2.0,  true, "Float less than or equal #1")
    assertEq(2.0 <= 2.0,  true, "Float less than or equal #2")
    assertEq(3.0 <= 2.5, false, "Float less than or equal #3")
    assertEq(3.0 > 2.5,   true, "Float greater than #1")
    assertEq(1.5 > 2.0,  false, "Float greater than #2")
    assertEq(3.0 >= 2.5,  true, "Float greater than or equal #1")
    assertEq(3.5 >= 3.5,  true, "Float greater than or equal #2")
    assertEq(3.5 >= 4.0, false, "Float greater than or equal #3")

    assertEq(1 < 2.5,   true, "Int left float right less than #1")
    assertEq(2 < 2.0,  false, "Int left float right less than #2")
    assertEq(1 <= 2.0,  true, "Int left float right less than or equal #1")
    assertEq(2 <= 2.0,  true, "Int left float right less than or equal #2")
    assertEq(3 <= 2.5, false, "Int left float right less than or equal #3")
    assertEq(3 > 2.5,   true, "Int left float right greater than #1")
    assertEq(1 > 2.0,  false, "Int left float right greater than #2")
    assertEq(3 >= 2.5,  true, "Int left float right greater than or equal #1")
    assertEq(3 >= 3.0,  true, "Int left float right greater than or equal #2")
    assertEq(3 >= 4.0, false, "Int left float right greater than or equal #3")

    assertEq(1.5 < 2,   true, "Float left int right less than #1")
    assertEq(2.0 < 2,  false, "Float left int right less than #2")
    assertEq(1.5 <= 2,  true, "Float left int right less than or equal #1")
    assertEq(2.0 <= 2,  true, "Float left int right less than or equal #2")
    assertEq(3.0 <= 2, false, "Float left int right less than or equal #3")
    assertEq(3.0 > 2,   true, "Float left int right greater than #1")
    assertEq(1.5 > 2,  false, "Float left int right greater than #2")
    assertEq(3.0 >= 2,  true, "Float left int right greater than or equal #1")
    assertEq(3.0 >= 3,  true, "Float left int right greater than or equal #2")
    assertEq(3.5 >= 4, false, "Float left int right greater than or equal #3")

    // Relational operators have higher precedence over equality operators
    assert(1 <  2 == 2 >  1, "Equal / relational precedence #1")
    assert(1 <= 2 == 2 >= 1, "Equal / relational precedence #2")
    assert(2 >  1 == 1 <  2, "Equal / relational precedence #3")
    assert(2 >= 1 == 1 <= 2, "Equal / relational precedence #4")

    // The logical operators are the usual &&, ||, and ! for and, or, and not.
    assertEq(true  && true,  true,  "And #1")
    assertEq(true  && false, false, "And #2")
    assertEq(false && true,  false, "And #3")
    assertEq(false && false, false, "And #4")

    assertEq(true  || true,  true,  "Or #1")
    assertEq(true  || false, true,  "Or #2")
    assertEq(false || true,  true,  "Or #3")
    assertEq(false || false, false, "Or #4")

    assertEq(!true, false, "Not #1")
    assertEq(!false, true, "Not #2")
    assertEq(!false || true, true, "Leading not")

    // && has lower precedence than equality and inequality.
    assert(1 != 2 && 2 == 2, "and precedence #1")
    assert(2 == 2 && 1 != 2, "and precedence #2")

    // || is lower in precedence than &&.
    assertEq(true || false && false, true, "or precedence #1")
    assertEq((true || false) && false, false, "or precedence #1")

    // All values have a truth value.  false and null are false, everything else
    // is considered true.
    assertEq(!null, true, "Null considered false #1")
    assertEq(null || true, true, "Null considered false #2")
    assertEq(null && true, false, "Null considered false #3")
    assertEq(!1, false, "Objects considered true.")
}

///////////////////////////////////////////////////////////////////////////////
// Variables Blocks
///////////////////////////////////////////////////////////////////////////////

let testVariablesAndBlocks = fn () {

    // Variables are declared with the keyword "var" and the assignment operator:
    // "=".  A variable must be declared before it is used or else there will be
    // a runtime error.
    //
    // Identifiers must start with a letter and after that letters or digits
    // are valid.
    let x = 123
    assertEq(x, 123, "variable declaration")
  
    // A variable may be updated with the assignment operator.
    x = x + 1
    assertEq(x, 124, "variable assignment")
  
    // Assignments are an expression that return the value assigned to the
    // variable.
    assertEq(x = 2 * x, 248, "assignment expression value")

    //
    // "{" and "}" delimit a block.  Within a block multiple expressions can
    // be listed.  Each expression is evaluated in the order they are found. 
    // All expression values are ignored, except the last one.  The last
    // expression is the result of the block.  The ignored expressions usually
    // will be useful for their side effects.
    //
    // Crisp has no token to mark the end of an expression, not even new lines.
    // An expression ends when the next token can"t be connected with the
    // current expression.  In the example below we have the expression 5*6 with
    // the next token 2.  Since 2 is not a token that can be used to extend the
    // 5*6 expression, the expression parsing stops.  For the last expression a
    // similar things happens with the end token.  It can't be used to continue
    // the 1+2 expression.
    //
    assertEq( { 5*6  1+2 } , 3, "Block expression return value")
  
    // Blocks can contain one expression.
    assertEq( { 2+3 }, 5, "Single expression block.")
  
    // Empty blocks return null.
    assertEq( { } , null, "Empty block")
  
    // blocks also introduce a new scope for variable declarations.  You can 
    // "shadow" variables in outer scopes.
    {
        let y = 100
        let x = 2 * y
        assertEq(y, 100, "block variable")
        assertEq(x, 200, "block variable shadowing")
    }
    assertEq(x, 248, "variable unshadowed")
}

// Variables declared in the top scope are global variables.
let globalVar = 1234

let testGlobalVariables = fn () {
    let localVar = 4321
    assertEq(globalVar + localVar, 5555, "global variable")
}

///////////////////////////////////////////////////////////////////////////////
// Branching
///////////////////////////////////////////////////////////////////////////////

let testBranching = fn () {
    // The usual if / else is present.  The syntax is
    //     "if" expr block ( "else" "if" expr block )* ("else" block)?
    //
    // The <expr> expression is evaluated, and if it is truthy -- that is
    // if it is not false and not null -- then the consequent is evaluated.
    // Otherwise the alternative is evaluated, if it exists.  If the
    // alternative wasn't given then it defaults to null.

    // ifs are expressions.
    assertEq(if true { 123 }, 123, "If true expression")

    // If there is no else and the condition expression is falsy, then the
    // result is null.
    assertEq(if false { 123 }, null, "If false expression")

    // If there is an else, and the condition expression is falsy, then the
    // result is the alternative expression.
    assertEq(if false { 123 } else { 321 }, 321, "If / else false expression")

    // Any valid expression can go in the condition, consequent, and
    // alternative.
    assertEq(
        if { let result = 1 + 2  result == 3 } {
            let x = 4
            let y = 2
            x*y
        } else {
            "this will not be the result"
		},
        8,
        "If / else expressions")

    // Since null is treated as false, you can check for null variables with if
    {
        let x = null
        let message = "using if to test for null"
        if x {
            fail(message)
        } else {
            pass(message)
		}
    }

    // You can do if else chains
    {
        let name = "Tom"
        assertEq(
            if name == "Jerry" { 1 }
            else if name == "Susan" { 2 }
            else if name == "Tom" { 3 }
            else { 0 },
            3,
            "if else chains")
    }
}

///////////////////////////////////////////////////////////////////////////////
// Looping
///////////////////////////////////////////////////////////////////////////////

let testLooping = fn () {

    // The usual while loop is present.  The syntax is
    //     while <condition> <block>
    // 
    // The block expression is repeatedly as while the condition expression is
    // truthy.  Like if / else, the condition can be any valid kind of
    // expression.
    // 
    {
        let sum = 0
        let n = 1
        while n <= 100 {
            sum = sum + n
            n = n + 1
        }
        assertEq(sum, 5050, "While loop")
    }


    // As usual while loops can fail to run at all.
    {
        let n = 100
        while false {
            n = n + 1
		}
        assertEq(n, 100, "Never executing while loop")
    }

    // A while always evaluates to null, as they are used for their side
    // effects.
    assertEq(while false { 0 }, null, "While evals to null")
}

///////////////////////////////////////////////////////////////////////////////
// Functions
///////////////////////////////////////////////////////////////////////////////

// The syntax for a function definition is
//   fn (<comma separated parameters>) <block>
// The value of the function is value of the body.  As is usual, () is the
// "invocation" operator.  Functions must be assigned to a variable if you want
// to call them in other expressions.

let nothing = fn () { }

let square = fn (x) { x * x }

let divides = fn (m, n) {
    let remainder = n % m
    remainder == 0
}

let factorial = fn (n) {
    if n == 1 { 1 }
    else { n * factorial(n - 1) }
}

let tailCall = fn (a, i, n) {
    if i <= 0 { a }
    else { tailCall(a + i, i - 1, n) }
}

let addTogether = fn (x, y, z) { x + y + z }

let testFunctions = fn () {
    assertEq(nothing(), null, "Empty function")
    assertEq(square(3), 9, "Function declaration")
    assertEq(divides(5, 35), true, "Named functions")
    assertEq(factorial(10), 3628800, "Recursive functions")
    let N = 100000
    assertEq(tailCall(0, N, N), 5000050000, "tail call elimination")
    assertEq(addTogether(100)(200)(300), 600, "function currying")

    // Functions also do closures.  An inner variable can hide an outer
    // variable as long as it defined somewhere in the same scope as the 
    // function.
    {
        let a = "outer"
        {
            let getA = fn () { a }
            assertEq(getA(), "outer", "Closure test #1")
            let a = "inner"
            assertEq(getA(), "inner", "Closure test #2")
        }
    }
}

///////////////////////////////////////////////////////////////////////////////
// More Logical
///////////////////////////////////////////////////////////////////////////////

let testLogicalAndOr = fn () {
    let createCounter = fn () {
        let n = 0
        fn () { n = n + 1}
    }
    let counter = createCounter()

    // The "&&" operator short circuits in the expected way.
    assertEq(false && counter() == 1, false, "and short circuits #1")
    assertEq(counter(), 1, "and short circuits #2")
    assertEq(true && counter() == 2, true, "and short circuits #3")
    assertEq(counter(), 3, "and short circuits #4")

    // The "||" operator short circuits in the expected way.
    counter = createCounter()
    assertEq(true || counter() == 1, true, "or short circuits #1")
    assertEq(counter(), 1, "or short circuits #2")
    assertEq(false || counter() == 2, true, "or short circuits #3")
    assertEq(counter(), 3, "or short circuits #4")
}

testLiterals()
testOperators()
testVariablesAndBlocks()
testGlobalVariables()
testBranching()
testLooping()
testFunctions()
testLogicalAndOr()

displaySummary()
