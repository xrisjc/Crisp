///////////////////////////////////////////////////////////////////////////////
// File: Test.crisp
// Purpose: Integration testing of Crisp functionality that also serves as a
// guide to Crisp (for now).
///////////////////////////////////////////////////////////////////////////////

//
// As you might have guessed, // starts a comment.  As per usual, comments are
// ignored and end when a new line character is reached.
//
// All other whitespace is ignored, so your free to format code as you see
// fit.
//

//
// Crisp is a dynamic language with Pascal-like syntax where everything is
// an expression and all values are objects.
//

///////////////////////////////////////////////////////////////////////////////
// Basic Literals
///////////////////////////////////////////////////////////////////////////////

var testLiterals = function (t) {
    // Crisp has the literal expressions you would expect.

    // Strings are delimited by single quotes. The are the .NET string type
    // internally.
    t.assertEq("hi", "hi", "string literal")

    // Number values are 64 bit floating point numbers.
    t.assertEq(123, 123, "integer number literal")
    t.assertEq(1.5, 1.5, "fractional number literal")

    // Boolean values are given by keywords true and false representing the
    // obvious values.  The are represented by the bool type internally.
    t.assert(true, "true literal")
    t.assertEq(false, false, "false literal")

    // The keyword null evaluates to the null object value, which is a singleton
    // value that is not equal to any other value.
    t.assertEq(null, null, "null literal")
}

///////////////////////////////////////////////////////////////////////////////
// Operators
///////////////////////////////////////////////////////////////////////////////

var testOperators = function (t) {
    // After literals, more complex expressions can be created with operators.

    // Crisp has the usual arithmetic operators `+`, `-`, `*`, `/`, and `mod`.
    t.assertEq(1.0 + 2.5,  3.5, "addition")
    t.assertEq(5.5 - 2.0,  3.5, "subtraction")
    t.assertEq(2.5 * 3.0,  7.5, "multiplication")
    t.assertEq(12.5 % 5.0, 2.5, "modulo")
    t.assertEq(15.0 / 5.0, 3.0, "division #1")
    t.assertEq(1.0 / 2.0,  0.5, "division #2")
    t.assertEq(-0.5, 0.5-1.0, "negation")

    // The arithmetic operators have the usual precedence levels.
    t.assertEq(1 + 2 * 3,  7, "addition and multiplication")
    t.assertEq(10 - 2 * 3, 4, "subtraction and multiplication")
    t.assertEq(1 + 15 / 3, 6, "addition and division")
    t.assertEq(1 + 8 % 3,  3, "addition and modulo")
    t.assertEq(-2 + 4, 2, "leading negatives")

    // But, grouping with parenthesis will change order of evaluation, as you
    // would expected.
    t.assertEq((1 + 2) * 3,   9, "addition grouped and multiplication")
    t.assertEq((10 - 2) * 3, 24, "subtraction grouped and multiplication")

    // All relation operators evaluate to a boolean value.
    // The equal operator is a single =.
    t.assertEq(1 == 1,          true, "int equality true")
    t.assertEq(1 == 2,         false, "int equality false")
    t.assertEq(1.5 == 1.5,      true, "float equality true")
    t.assertEq(1.5 == 2.0,     false, "float equality false")
    t.assertEq(false == false,  true, "bool equality true")
    t.assertEq(false == true , false, "bool equality false")
    t.assertEq("hey" == "hey",  true, "string equality true")
    t.assertEq("hey" == "HEY", false, "string equality false")

    // == is a strict equality operator. There are no conversions done.
    t.assertEq(false == 0, false, "false and zero are not equal")

    // null is equal to itself but not to other values.
    t.assert(null == null, "null equals itself")
    t.assertEq(null == 0, false, "null and zero are not equal")

    // != is the inequality operator
    t.assertEq(1 != 1,         false, "int inequality false")
    t.assertEq(1 != 2,          true, "int inequality true")
    t.assertEq(1.5 != 1.5,     false, "float inequality false")
    t.assertEq(1.5 != 2.0,      true, "float inequality true")
    t.assertEq(false != false, false, "bool inequality false")
    t.assertEq(false != true,   true, "bool inequality true")
    t.assertEq("hey" != "hey", false, "string inequality false")
    t.assertEq("hey" != "HEY",  true, "string inequality true")

    // != is also a strict inequality operator. There are no conversions done.
    t.assertEq(false != 0, true, "false and zero are inequal")

    // == and != are lower than arithmetic in precedence.
    t.assertEq(1  +  2 * 3 == 7, true, "= precedence")
    t.assertEq(1  +  2 * 3 != 9, true, "!= precedence")

    // There are also the normal relational operators.  These only work for
    // number valued objects.
    t.assertEq(1 < 2,   true, "Int less than #1")
    t.assertEq(2 < 2,  false, "Int less than #2")
    t.assertEq(1 <= 2,  true, "Int less than or equal #1")
    t.assertEq(2 <= 2,  true, "Int less than or equal #2")
    t.assertEq(3 <= 2, false, "Int less than or equal #3")
    t.assertEq(3 > 2,   true, "Int greater than #1")
    t.assertEq(1 > 2,  false, "Int greater than #2")
    t.assertEq(3 >= 2,  true, "Int greater than or equal #1")
    t.assertEq(3 >= 3,  true, "Int greater than or equal #2")
    t.assertEq(3 >= 4, false, "Int greater than or equal #3")

    t.assertEq(1.5 < 2.0,   true, "Float less than #1")
    t.assertEq(2.0 < 2.0,  false, "Float less than #2")
    t.assertEq(1.5 <= 2.0,  true, "Float less than or equal #1")
    t.assertEq(2.0 <= 2.0,  true, "Float less than or equal #2")
    t.assertEq(3.0 <= 2.5, false, "Float less than or equal #3")
    t.assertEq(3.0 > 2.5,   true, "Float greater than #1")
    t.assertEq(1.5 > 2.0,  false, "Float greater than #2")
    t.assertEq(3.0 >= 2.5,  true, "Float greater than or equal #1")
    t.assertEq(3.5 >= 3.5,  true, "Float greater than or equal #2")
    t.assertEq(3.5 >= 4.0, false, "Float greater than or equal #3")

    t.assertEq(1 < 2.5,   true, "Int left float right less than #1")
    t.assertEq(2 < 2.0,  false, "Int left float right less than #2")
    t.assertEq(1 <= 2.0,  true, "Int left float right less than or equal #1")
    t.assertEq(2 <= 2.0,  true, "Int left float right less than or equal #2")
    t.assertEq(3 <= 2.5, false, "Int left float right less than or equal #3")
    t.assertEq(3 > 2.5,   true, "Int left float right greater than #1")
    t.assertEq(1 > 2.0,  false, "Int left float right greater than #2")
    t.assertEq(3 >= 2.5,  true, "Int left float right greater than or equal #1")
    t.assertEq(3 >= 3.0,  true, "Int left float right greater than or equal #2")
    t.assertEq(3 >= 4.0, false, "Int left float right greater than or equal #3")

    t.assertEq(1.5 < 2,   true, "Float left int right less than #1")
    t.assertEq(2.0 < 2,  false, "Float left int right less than #2")
    t.assertEq(1.5 <= 2,  true, "Float left int right less than or equal #1")
    t.assertEq(2.0 <= 2,  true, "Float left int right less than or equal #2")
    t.assertEq(3.0 <= 2, false, "Float left int right less than or equal #3")
    t.assertEq(3.0 > 2,   true, "Float left int right greater than #1")
    t.assertEq(1.5 > 2,  false, "Float left int right greater than #2")
    t.assertEq(3.0 >= 2,  true, "Float left int right greater than or equal #1")
    t.assertEq(3.0 >= 3,  true, "Float left int right greater than or equal #2")
    t.assertEq(3.5 >= 4, false, "Float left int right greater than or equal #3")

    // Relational operators have higher precedence over equality operators
    t.assert(1 <  2 == 2 >  1, "Equal / relational precedence #1")
    t.assert(1 <= 2 == 2 >= 1, "Equal / relational precedence #2")
    t.assert(2 >  1 == 1 <  2, "Equal / relational precedence #3")
    t.assert(2 >= 1 == 1 <= 2, "Equal / relational precedence #4")

    // The logical operators are the usual &&, ||, and ! for and, or, and not.
    t.assertEq(true  && true,  true,  "And #1")
    t.assertEq(true  && false, false, "And #2")
    t.assertEq(false && true,  false, "And #3")
    t.assertEq(false && false, false, "And #4")

    t.assertEq(true  || true,  true,  "Or #1")
    t.assertEq(true  || false, true,  "Or #2")
    t.assertEq(false || true,  true,  "Or #3")
    t.assertEq(false || false, false, "Or #4")

    t.assertEq(!true, false, "Not #1")
    t.assertEq(!false, true, "Not #2")
    t.assertEq(!false || true, true, "Leading not")

    // && has lower precedence than equality and inequality.
    t.assert(1 != 2 && 2 == 2, "and precedence #1")
    t.assert(2 == 2 && 1 != 2, "and precedence #2")

    // || is lower in precedence than &&.
    t.assertEq(true || false && false, true, "or precedence #1")
    t.assertEq((true || false) && false, false, "or precedence #1")

    // All values have a truth value.  false and null are false, everything else
    // is considered true.
    t.assertEq(!null, true, "Null considered false #1")
    t.assertEq(null || true, true, "Null considered false #2")
    t.assertEq(null && true, false, "Null considered false #3")
    t.assertEq(!1, false, "Objects considered true.")
}

///////////////////////////////////////////////////////////////////////////////
// Variables Blocks
///////////////////////////////////////////////////////////////////////////////

var testVariablesAndBlocks = function (t) {

    // Variables are declared with the keyword "var" and the assignment operator:
    // "=".  A variable must be declared before it is used or else there will be
    // a runtime error.
    //
    // Identifiers must start with a letter and after that letters or digits
    // are valid.
    var x = 123
    t.assertEq(x, 123, "variable declaration")
  
    // A variable may be updated with the assignment operator.
    x = x + 1
    t.assertEq(x, 124, "variable assignment")
  
    // Assignments are an expression that return the value assigned to the
    // variable.
    t.assertEq(x = 2 * x, 248, "assignment expression value")

    //
    // "{" and "}" delimit a block.  Within a block multiple expressions can
    // be listed.  Each expression is evaluated in the order they are found.  All
    // expression values are ignored, except the last one.  The last expression
    // is the result of the the last expression.  The ignored expressions usually
    // will be useful for their side effects.
    //
    // Crisp has no token to mark the end of an expression, not even new lines.
    // An expression ends when the next token can"t be connected with the
    // current expression.  In the example below we have the expression 5*6 with
    // the next token 2.  Since 2 is not a token that can be used to extend the
    // 5*6 expression, the expression parsing stops.  For the last expression a
    // similar things happens with the end token.  It can"t be used to continue
    // the 1+2 expression.
    //
    t.assertEq( { 5*6  1+2 } , 3, "Block expression return value")
  
    // Blocks can contain one expression.
    t.assertEq( { 2+3 }, 5, "Single expression block.")
  
    // Empty blocks do nothing but return null.
    t.assertEq( { } , null, "Empty block")
  
    // blocks also introduce a new scope for variable declarations.  You can 
    // "shadow" variables in outer scopes.
    {
        var y = 100
        var x = 2 * y
        t.assertEq(y, 100, "block variable")
        t.assertEq(x, 200, "block variable shadowing")
    }
    t.assertEq(x, 248, "variable unshadowed")
}

// Variables declared in the top scope are global variables.
var globalVar = 1234

var testGlobalVariables = function (t) {
    var localVar = 4321
    t.assertEq(globalVar + localVar, 5555, "global variable")
}

///////////////////////////////////////////////////////////////////////////////
// Branching
///////////////////////////////////////////////////////////////////////////////

var testBranching = function (t) {
    // The usual if / else is present.  The syntax is
    //     "if" expr block ( "else" "if" expr block )* ("else" block)?
    //
    // The <expr> expression is evaluated, and if it is truthy -- that is
    // if it is not false and not null -- then the consequent is evaluated.
    // Otherwise the alternative is evaluated, if it exists.  If the
    // alternative wasn't given then it defaults to null.

    // ifs are expressions.
    t.assertEq(if true { 123 }, 123, "If true expression")

    // If there is no else and the condition expression is falsy, then the
    // result is null.
    t.assertEq(if false { 123 }, null, "If false expression")

    // If there is an else, and the condition expression is falsy, then the
    // result is the alternative expression.
    t.assertEq(if false { 123 } else { 321 }, 321, "If / else false expression")

    // Any valid expression can go in the condition, consequent, and
    // alternative.
    t.assertEq(
        if { var result = 1 + 2  result == 3 } {
            var x = 4
            var y = 2
            x*y
        } else {
            "this will not be the result"
		},
        8,
        "If / else expressions")

    // Since null is treated as false, you can check for null variables with if
    {
        var x = null
        var message = "using if to test for null"
        if x {
            t.fail(message)
        } else {
            t.pass(message)
		}
    }

    // You can do if else chains
    {
        var name = "Tom"
        t.assertEq(
            if name == "Jerry" { 1 }
            else if name == "Susan" { 2 }
            else if name == "Tom" { 3 }
            else { 0 },
            3,
            "if else chains")
    }
}

///////////////////////////////////////////////////////////////////////////////
// Looping
///////////////////////////////////////////////////////////////////////////////

var testLooping = function (t) {

    // The usual while loop is present.  The syntax is
    //     while <condition> <block>
    // 
    // Repeatedly evaluates the block expression as while the condition
    // expression is truthy.  Like if / else, condition and body can be any
    // valid kind of expression.
    // 
    {
        var sum = 0
        var n = 1
        while n <= 100 {
            sum = sum + n
            n = n + 1
        }
        t.assertEq(sum, 5050, "While loop")
    }


    // As usual while loops can fail to run at all.
    {
        var n = 100
        while false {
            n = n + 1
		}
        t.assertEq(n, 100, "Never executing while loop")
    }

    // A while always evaluates to null.
    t.assertEq(while false { 0 }, null, "While evals to null")
}

///////////////////////////////////////////////////////////////////////////////
// Functions
///////////////////////////////////////////////////////////////////////////////

// The syntax for a function definition is
//   function (<comma separated parameters>) <block>
// The value of the function is value of the body.  As is usual, () is the
// "invocation" operator.  Functions must be assigned to a variable if you want
// to call them.

var nothing = function () { }

var square = function (x) { x * x }

var divides = function (m, n) {
    var remainder = n % m
    remainder == 0
}

var factorial = function (n) {
    if n == 1 { 1 }
    else { n * factorial(n - 1) }
}

var testFunctions = function (t) {
    t.assertEq(nothing(), null, "Empty function")
    t.assertEq(square(3), 9, "Function declaration")
    t.assertEq(divides(5, 35), true, "Named functions")
    t.assertEq(factorial(10), 3628800, "Recursive functions")

    // Functions also do closures.  An inner variable can hide an outer
    // variable as long as it defined somewhere in the same scope as the 
    // function.
    {
        var a = "outer"
        {
            var getA = function () { a }
            t.assertEq(getA(), "outer", "Closure test #1")
            var a = "inner"
            t.assertEq(getA(), "inner", "Closure test #2")
        }
    }
}

///////////////////////////////////////////////////////////////////////////////
// More Logical
///////////////////////////////////////////////////////////////////////////////

var testLogicalAndOr = function (t) {
    var counter = Object.beget()
    counter.n = 0
    counter.get = function () { self.n = self.n + 1 }

    // The "and" operator short circuits in the expected way.
    t.assertEq(false && counter.get() == 1, false, "and short circuits #1")
    t.assertEq(counter.get(), 1, "and short circuits #2")
    t.assertEq(true && counter.get() == 2, true, "and short circuits #3")
    t.assertEq(counter.get(), 3, "and short circuits #4")

    // The "or" operator short circuits in the expected way.
    counter.n = 0
    t.assertEq(true || counter.get() == 1, true, "or short circuits #1")
    t.assertEq(counter.get(), 1, "or short circuits #2")
    t.assertEq(false || counter.get() == 2, true, "or short circuits #3")
    t.assertEq(counter.get(), 3, "or short circuits #4")
}

///////////////////////////////////////////////////////////////////////////////
// Objects
///////////////////////////////////////////////////////////////////////////////

var testObjects = function (t) {
    // New objects can be created with the beget method.  beget creates a new
    // object using the original object as a prototype.  The "Object" name is
    // bound to an object which is the prototype of all objects.
    //     Objects may have properties.  Properties can be described using
    // a .identifer or an [ ] indexer.
    var person = Object.beget()
    person.name = Object.beget()
    person.name.first = "John"
    person.name.last = "Smith"
    person.age = 40

    // Object properties can be retrieved with the index operator.  The
    // property name must be passed in as a string.
    t.assertEq(person["age"], 40, "Object indexing get #1")
    t.assertEq(person["name"]["first"], "John", "Object indexing get #2")

    // Object properties can be updated and added using the index operator
    // and an assignment operator.
    person["weight"] = 250
    person["name"]["middle"] = "James"
    t.assertEq(person["weight"], 250, "Object index set #1")
    t.assertEq(person["name"]["middle"], "James", "Object index set #2")

    // If the object"s key is a valid identfier then a property"s value can
    // be got with a "." operator.  It can also be set the same way.  This,
    // of course, is easier to use than the index operator.
    person.height = 5.5
    person.name.title = "Dr."
    t.assertEq(person.height, 5.5, "Dot operator #1")
    t.assertEq(person.name.title, "Dr.", "Dot operator #2")

    // In fact the key to an object property can be any other object, but
    // then you"re stuck with using the index operator.  That is objects
    // are maps / dictionaries / associative arrays.  You can also
    // add properties to objects other than user defined ones.
    person[false] = 2.5
    var f = function (x) { 2 * x }
    f.description = "a function that doubles"
    t.assertEq(person[false], 2.5, "Index operator bool key")
    t.assertEq(f.description, "a function that doubles", "Property on a function")
    t.assertEq(f(2), 4, "Function call that has a property")

    // If a key isn"t in an object, then retrieving it returns null.
    t.assertEq(person.gender, null, "object key not set")

    // The is operator tests if two objects are the same object or if the
    // right hand side object is in the left hand side object"s prototype
    // chain.  The Object, Number, String, Null, Bool, and Function names are
    // all bound to the prototype of their respective types.
    var IsObject = Object.beget()
    var isNumber = 0
    var isString = ""
    var isNull = null
    var isBool = true
    var isFunction = function () { }

    t.assert(IsObject is Object, "is object")
    t.assert(isNumber is Object, "number is object")
    t.assert(isString is Object, "string is object")
    t.assert(isNull is Object, "null is object")
    t.assert(isBool is Object, "bool is object")
    t.assert(isFunction is Object, "function is object")

    t.assert(IsObject is IsObject, "is object itself")
    t.assert(IsObject.beget() is IsObject, "child IsObject is IsObject")
    t.assert(isNumber is Number, "is number")
    t.assert(isString is String, "is string")
    t.assert(isNull is Null, "is null")
    t.assert(isBool is Bool, "is bool")
    t.assert(isFunction is Function, "is function")

    t.assertEq(0 is Bool, false, "is negative result")
}

///////////////////////////////////////////////////////////////////////////////
// Iterable objects and iterators.
///////////////////////////////////////////////////////////////////////////////

var testIterable = function (t) {
    // Objects can be made to be iterable if they have a method named
    // `getIterator` that returns an iterator object.  The iterator object
    // must have two methods: `next` and `current`.  The for loop expects an
    // iterable object and will uses the interface described above.
    var iterable = Object.beget()
    iterable.getIterator = function () {
        var itr = Object.beget()
        itr.value = 0
        itr.current = function () { self.value }
        itr.next = function () {
            self.value = self.value + 1
            self.value <= 10
        }
        itr
    }

    var sum = 0
    for x in iterable {
        sum = sum + x
	}
    
    t.assertEq(sum, 55, "iterable")

    // The for loop works like the following code.
    sum = 0
    var itr = iterable.getIterator()
    while itr.next() {
        sum = sum + itr.current()
	}
    t.assertEq(sum, 55, "manual iterable")
}

///////////////////////////////////////////////////////////////////////////////
// Lists
///////////////////////////////////////////////////////////////////////////////

var testLists = function (t) {
    // List objects are dynamically sized arrays.  They are created a literal
    // syntax and are indexed in the usual way starting at zero.
    var emptyList = []
    var list = [3*2, "hello", false, null, Object.beget(), function (x) { x }]

    t.assertEq(list[0], 6, "list indexing #1")
    t.assertEq(list[2], false, "list indexing #2")
    t.assertEq(list[5](100), 100, "list indexing #3")

    list[3] = true
    t.assertEq(list[3], true, "list update")

    // Lists have `length` and `add` methods.
    t.assertEq(emptyList.length(), 0, "length of empty list")
    t.assertEq(list.length(), 6, "length of non-empty list")
    
    list.add("new item")
    t.assertEq(list.length(), 7, "length of non-empty list #2")
    t.assertEq(list[6], "new item", "list indexing #4")

    // Lists are all iterable objects and can be used in for .. in loops.
    var sum = 0
    for x in [] {
        sum = sum + x
	}
    t.assertEq(sum, 0, "iterable list #1")

    for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] {
        sum = sum + x
    }
    t.assertEq(sum, 55, "iterable list #2")

    var itr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].getIterator()
    sum = 0
    while itr.next() {
        sum = sum + itr.current()
	}
    t.assertEq(sum, 55, "manual itr through a list")
}

///////////////////////////////////////////////////////////////////////////////
// Code to manage running tests.
///////////////////////////////////////////////////////////////////////////////

var Test = Object.beget()
    
Test.init = function (showPassedTest) {
    self.nTests = 0
    self.nErrors = 0
    self.showPassedTest = showPassedTest
    self
}

Test.displaySummary = function () {
    write("\n", self.nTests - self.nErrors, " out of ", self.nTests, " tests passed.\n")
    write("There are ", self.nErrors, " errors. ")
    write(if self.nErrors == 0 { ":-)" } else { "D-:" }, "\n")
}

Test.pass = function (message) {
    self.nTests = self.nTests + 1
    write("[OK] `", message, "`\n")
}

Test.fail = function (message) {
    self.nTests = self.nTests + 1
    self.nErrors = self.nErrors + 1
    write("[FAILED] `", message, "`\n")
}

Test.assert = function (condition, message) {
    if !condition {
        self.fail(message)
    } else if self.showPassedTest {
        self.pass(message)
	}
}

Test.assertEq = function (actual, expected, message) {
    self.nTests = self.nTests + 1
    if actual != expected {
        write("[FAILED] ", message, ": expected `", expected, "` got `",
            actual, "`\n")
        self.nErrors = self.nErrors + 1
    } else if self.showPassedTest {
        write("[OK] ", message, "\n")
	}
}

{
    var test = Test.beget().init(true)

    testLiterals(test)
    testOperators(test)
    testVariablesAndBlocks(test)
    testGlobalVariables(test)
    testBranching(test)
    testLooping(test)
    testFunctions(test)
    testLogicalAndOr(test)
    testObjects(test)
    testIterable(test)
    testLists(test)

    test.displaySummary()
}
