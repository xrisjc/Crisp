///////////////////////////////////////////////////////////////////////////////
// File: Test.crisp
// Purpose: Integration testing of Crisp functionality that also serves as a
// guide to Crisp (for now).
///////////////////////////////////////////////////////////////////////////////

//
// As you might have guessed, // starts a comment.  As per usual, comments are
// ignored and end when a new line character is reached.
//
// All other whitespace is ignored, so your free to format code as you see
// fit.
//

///////////////////////////////////////////////////////////////////////////////
// Basic Literals
///////////////////////////////////////////////////////////////////////////////

function testLiterals() {
    // Crisp has the literal expressions you would expect.

    // Strings are delimited by single quotes. The are the .NET string type
    // internally.
    assertEq('hi', 'hi', 'string literal')

    // Number values are 32 bit integers or 64 bit floating point numbers.
    assertEq(123, 123, 'int number literal')
    assertEq(1.5, 1.5, 'floating point')

    // Boolean values are given by keywords true and false representing the
    // obvious values.  The are represented by the bool type internally.
    assert(true, 'true literal')
    assertEq(false, false, 'false literal')

    // The keyword null evaluates to the null object value, which is a singleton
    // value that is not equal to any other value.
    assertEq(null, null, 'null literal')
}

///////////////////////////////////////////////////////////////////////////////
// Operators
///////////////////////////////////////////////////////////////////////////////

function testOperators() {
    // After literals, more complex expressions can be created with operators.

    // Crisp has the usual arithmetic operators for integer and floating point
    // values.
    assertEq(1 + 2,  3, 'integer addition')
    assertEq(5 - 2,  3, 'integer subtraction')
    assertEq(2 * 3,  6, 'integer multiplication')
    assertEq(12 mod 5, 2, 'integer modulo')
    assertEq(15 / 5, 3, 'integer division #1')
    assertEq(1 / 2,  0, 'integer division #2')
    assertEq(-2, 2-4, 'integer negation')

    assertEq(1.0 + 2.5,  3.5, 'floating point addition')
    assertEq(5.5 - 2.0,  3.5, 'floating point subtraction')
    assertEq(2.5 * 3.0,  7.5, 'floating point multiplication')
    assertEq(12.5 mod 5.0, 2.5, 'floating point modulo')
    assertEq(15.0 / 5.0, 3.0, 'floating point division #1')
    assertEq(1.0 / 2.0,  0.5, 'floating point division #2')
    assertEq(-0.5, 0.5-1.0, 'floating point negation')

    // Integer and floating point can be combined. The integer  value will be
    // converted into a floating point, and the result will be floating point.
    assertEq(1 + 2.5,   3.5, 'int left float right addition')
    assertEq(5 - 2.5,   2.5, 'int left float right subtraction')
    assertEq(3 * 3.5,  10.5, 'int left float right multiplication')
    assertEq(6 mod 5.5,   0.5, 'int left float right modulo')
    assertEq(15 / 5.0,  3.0, 'int left float right division #1')
    assertEq(1 / 2.0,   0.5, 'int left float right division #2')

    assertEq(1.5 + 2,   3.5, 'float left int right addition')
    assertEq(4.5 - 2,   2.5, 'float left int right subtraction')
    assertEq(3.5 * 3,  10.5, 'float left int right multiplication')
    assertEq(5.5 mod 5,   0.5, 'float left int right modulo')
    assertEq(15.0 / 5,  3.0, 'float left int right division #1')
    assertEq(1.0 / 2,   0.5, 'float left int right division #2')

    // The arithmetic operators have the usual precedence levels.
    assertEq(1 + 2 * 3,  7, 'addition and multiplication')
    assertEq(10 - 2 * 3, 4, 'subtraction and multiplication')
    assertEq(1 + 15 / 3, 6, 'addition and division')
    assertEq(1 + 8 mod 3,  3, 'addition and modulo')

    // But, grouping with parenthesis will change order of evaluation, as you
    // would expected.
    assertEq((1 + 2) * 3,   9, 'addition grouped and multiplication')
    assertEq((10 - 2) * 3, 24, 'subtraction grouped and multiplication')

    // + also concats strings
    assertEq('first ' + 'second', 'first second', 'string concat')

    // All relation operators evaluate to a boolean value.
    // The equal operator is a single =.
    assertEq(1 = 1,          true, 'int equality true')
    assertEq(1 = 2,         false, 'int equality false')
    assertEq(1.5 = 1.5,      true, 'float equality true')
    assertEq(1.5 = 2.0,     false, 'float equality false')
    assertEq(false = false,  true, 'bool equality true')
    assertEq(false = true , false, 'bool equality false')
    assertEq('hey' = 'hey',  true, 'string equality true')
    assertEq('hey' = 'HEY', false, 'string equality false')

    // = is a strict equality operator. There are no conversions done.
    assertEq(false = 0, false, 'false and zero are not equal')

    // null is equal to itself but not to other values.
    assert(null = null, 'null equals itself')
    assertEq(null = 0, false, 'null and zero are not equal')

    // <> is the inequality operator
    assertEq(1 <> 1,         false, 'int inequality false')
    assertEq(1 <> 2,          true, 'int inequality true')
    assertEq(1.5 <> 1.5,     false, 'float inequality false')
    assertEq(1.5 <> 2.0,      true, 'float inequality true')
    assertEq(false <> false, false, 'bool inequality false')
    assertEq(false <> true ,  true, 'bool inequality true')
    assertEq('hey' <> 'hey', false, 'string inequality false')
    assertEq('hey' <> 'HEY',  true, 'string inequality true')

    // <> is also a strict inequality operator. There are no conversions done.
    assertEq(false <> 0, true, 'false and zero are inequal')

    // Exception! Integers are converted into floating points when testing against
    // another floating point.
    assertEq(1 = 1.0,   true, 'int right float left equality true')
    assertEq(1 = 1.5,  false, 'int right float left equality false')
    assertEq(1.5 <> 1,  true, 'float right int left inequality true')
    assertEq(1.0 <> 1, false, 'float right int left inequality false')

    // = and <> are lower than arithmetic in precedence.
    assertEq(1  +  2 * 3 = 7, true, '= precedence')
    assertEq(1  +  2 * 3 <> 9, true, '<> precedence')

    // There are also the normal relational operators.  These only work for
    // number valued objects.
    assertEq(1 < 2,   true, 'Int less than #1')
    assertEq(2 < 2,  false, 'Int less than #2')
    assertEq(1 <= 2,  true, 'Int less than or equal #1')
    assertEq(2 <= 2,  true, 'Int less than or equal #2')
    assertEq(3 <= 2, false, 'Int less than or equal #3')
    assertEq(3 > 2,   true, 'Int greater than #1')
    assertEq(1 > 2,  false, 'Int greater than #2')
    assertEq(3 >= 2,  true, 'Int greater than or equal #1')
    assertEq(3 >= 3,  true, 'Int greater than or equal #2')
    assertEq(3 >= 4, false, 'Int greater than or equal #3')

    assertEq(1.5 < 2.0,   true, 'Float less than #1')
    assertEq(2.0 < 2.0,  false, 'Float less than #2')
    assertEq(1.5 <= 2.0,  true, 'Float less than or equal #1')
    assertEq(2.0 <= 2.0,  true, 'Float less than or equal #2')
    assertEq(3.0 <= 2.5, false, 'Float less than or equal #3')
    assertEq(3.0 > 2.5,   true, 'Float greater than #1')
    assertEq(1.5 > 2.0,  false, 'Float greater than #2')
    assertEq(3.0 >= 2.5,  true, 'Float greater than or equal #1')
    assertEq(3.5 >= 3.5,  true, 'Float greater than or equal #2')
    assertEq(3.5 >= 4.0, false, 'Float greater than or equal #3')

    // As with arithmetic and equality, mixing integer and floating point values
    // in relational operators will convert the integer to a floating point.
    assertEq(1 < 2.5,   true, 'Int left float right less than #1')
    assertEq(2 < 2.0,  false, 'Int left float right less than #2')
    assertEq(1 <= 2.0,  true, 'Int left float right less than or equal #1')
    assertEq(2 <= 2.0,  true, 'Int left float right less than or equal #2')
    assertEq(3 <= 2.5, false, 'Int left float right less than or equal #3')
    assertEq(3 > 2.5,   true, 'Int left float right greater than #1')
    assertEq(1 > 2.0,  false, 'Int left float right greater than #2')
    assertEq(3 >= 2.5,  true, 'Int left float right greater than or equal #1')
    assertEq(3 >= 3.0,  true, 'Int left float right greater than or equal #2')
    assertEq(3 >= 4.0, false, 'Int left float right greater than or equal #3')

    assertEq(1.5 < 2,   true, 'Float left int right less than #1')
    assertEq(2.0 < 2,  false, 'Float left int right less than #2')
    assertEq(1.5 <= 2,  true, 'Float left int right less than or equal #1')
    assertEq(2.0 <= 2,  true, 'Float left int right less than or equal #2')
    assertEq(3.0 <= 2, false, 'Float left int right less than or equal #3')
    assertEq(3.0 > 2,   true, 'Float left int right greater than #1')
    assertEq(1.5 > 2,  false, 'Float left int right greater than #2')
    assertEq(3.0 >= 2,  true, 'Float left int right greater than or equal #1')
    assertEq(3.0 >= 3,  true, 'Float left int right greater than or equal #2')
    assertEq(3.5 >= 4, false, 'Float left int right greater than or equal #3')

    // Relational operators have higher precedence over equality operators
    assert(1 <  2 = 2 >  1, 'Equal / relational precedence #1')
    assert(1 <= 2 = 2 >= 1, 'Equal / relational precedence #2')
    assert(2 >  1 = 1 <  2, 'Equal / relational precedence #3')
    assert(2 >= 1 = 1 <= 2, 'Equal / relational precedence #4')

    // The logical operators are 'and', 'or' and 'not'.
    assertEq(true  and true,  true,  'And #1')
    assertEq(true  and false, false, 'And #2')
    assertEq(false and true,  false, 'And #3')
    assertEq(false and false, false, 'And #4')

    assertEq(true  or true,  true,  'Or #1')
    assertEq(true  or false, true,  'Or #2')
    assertEq(false or true,  true,  'Or #3')
    assertEq(false or false, false, 'Or #4')

    assertEq(not true, false, 'Not #1')
    assertEq(not false, true, 'Not #2')

    // Logical and has lower precedence than equality and inequality.
    assert(1 <> 2 and 2 = 2, 'and precedence #1')
    assert(2 = 2 and 1 <> 2, 'and precedence #2')

    // 'or' is lower in precedence than 'and'.
    assertEq(true or false and false, true, 'or precedence #1')
    assertEq((true or false) and false, false, 'or precedence #1')

    // All values have a truth value.  false and null are false, everything else
    // is considered true.
    assertEq(not null, true, 'Null considered false #1')
    assertEq(null or true, true, 'Null considered false #2')
    assertEq(null and true, false, 'Null considered false #3')
    assertEq(not 1, false, 'Objects considered true.')
}

///////////////////////////////////////////////////////////////////////////////
// Variables Blocks
///////////////////////////////////////////////////////////////////////////////

function testVariablesAndBlocks() {

    // Variables are declared with the keyword "var" and the assignment operator:
    // ":=".  A variable must be declared before it is used or else there will be
    // a runtime error.
    //
    // Identifiers must start with a letter and after that letters or digits
    // are valid.
    var x := 123
    assertEq(x, 123, 'variable declaration')
  
    // A variable may be updated with the assignment operator.
    x := x + 1
    assertEq(x, 124, 'variable assignment')
  
    // Assignments are an expression that return the value assigned to the
    // variable.
    assertEq(x := 2 * x, 248, 'assignment expression value')

    //
    // '{' and '} delimit a block.  Within a block multiple expressions can
    // be listed.  Each expression is evaluated in the order they are found.  All
    // expression values are ignored, except the last one.  The last expression
    // is the result of the the last expression.  The ignored expressions usually
    // will be useful for their side effects.
    //
    // Crisp has no token to mark the end of an expression, not even new lines.
    // An expression ends when the next token can't be connected with the
    // current expression.  In the example below we have the expression 5*6 with
    // the next token 2.  Since 2 is not a token that can be used to extend the
    // 5*6 expression, the expression parsing stops.  For the last expression a
    // similar things happens with the end token.  It can't be used to continue
    // the 1+2 expression.
    //
    assertEq( { 5*6  1+2 } , 3, 'Block expression return value')
  
    // Blocks can contain one expression.
    assertEq( { 2+3 }, 5, 'Single expression block.')
  
    // Empty blocks do nothing but return null.
    assertEq( { } , null, 'Empty block')
  
    // blocks also introduce a new scope for variable declarations.  You can 
    // "shadow" variables in outer scopes.
    {
        var y := 100
        var x := 2 * y
        assertEq(y, 100, 'block variable')
        assertEq(x, 200, 'block variable shadowing')
    }
    assertEq(x, 248, 'variable unshadowed')
    // TODO: Test that y is undefined here.
}

// Variables declared in the top scope are global variables.
var globalVar := 1234

function testGlobalVariables() {
    var localVar := 4321
    assertEq(globalVar + localVar, 5555, 'global variable')
}

///////////////////////////////////////////////////////////////////////////////
// Branching
///////////////////////////////////////////////////////////////////////////////

function testBranching() {
    // The usual if / else is present.  The syntax is
    //     if <condition> <block>
    //     [else if <condition> <block>]*
    //     [else <block>]
    //
    // The <condition> expressions *must* be Boolean values or else there will
    // be a runtime exception.  The consequent <block> and means that braces
    // are required.  As many as you please else if can follow the first if
    // and proced an optional final else with a default <block>.

    // ifs are expressions.
    assertEq(if true { 123 }, 123, 'If true expression')

    // If there is no else and the condition expression is false, then the result
    // is null.
    assertEq(if false { 123 }, null, 'If false expression')

    // If there is an else, and the condition expression is false, then the result
    // is the alternative expression.
    assertEq(if false { 123 } else { 321 }, 321, 'If / else false expression')

    // Any valid expression can go in the condition, consequent, and alternative.
    assertEq(
        if { var result := 1 + 2  result = 3 } {
            var x := 4
            var y := 2
            x*y
        } else {
           'this will not be the result'
        },
        8,
        'If / else expressions')

    // Since null is treated as false, you can check for null variables with if
    {
        var x := null
        var message := 'using if to test for null'
        if x {
            fail(message)
        } else {
            pass(message)
        }
    }

    // You can do if else chains
    {
        var name := 'Tom'
        assertEq(
            if name = 'Jerry' { 1 }
            else if name = 'Susan' { 2 }
            else if name = 'Tom' { 3 }
            else { 0 },
            3,
            'if else chains')
    }
}

///////////////////////////////////////////////////////////////////////////////
// Looping
///////////////////////////////////////////////////////////////////////////////

function testLooping() {

    // The usual while loop is present.  The syntax is
    //     while <condition> <block>
    // 
    // The <condition> expression *must* be a Boolean value or else there will be 
    // a runtime exception.  Like if / else, condition and body can be any valid
    // kind of expression.  The body of the loop is a block, so braces are
	// required.
    // 
    {
        var sum := 0
        var n := 1
        while n <= 100 {
            sum := sum + n
            n := n + 1
        }
        assertEq(sum, 5050, 'While loop')
    }


    // As usual while loops can fail to run at all.
    {
        var n := 100
        while false {
            n := n + 1
        }
        assertEq(n, 100, 'Never executing while loop')
    }

    // A while always evaluates to null.
    assertEq(while false { 0 }, null, 'While evals to null')
}

///////////////////////////////////////////////////////////////////////////////
// Functions
///////////////////////////////////////////////////////////////////////////////

// The syntax for a function definition is
//   function <name> (<comma separated parameters>) <block>
// The value of the function is the final expression, or in case of an empty
// function, null.  As is usual, () is the "invocation" operator. 

function nothing() { }

function square(x) { x * x }

function divides(m, n) {
    var remainder := n mod m
    remainder = 0
}

function testFunctions() {
    assertEq(nothing(), null, 'Empty function')
    assertEq(square(3), 9, 'Function declaration')
    assertEq(divides(5, 35), true, 'Named functions')
}

///////////////////////////////////////////////////////////////////////////////
// More Logical
///////////////////////////////////////////////////////////////////////////////

var nCounter := 0
function counterGet() { nCounter := nCounter + 1 }

function testLogicalAndOr() {
    // The 'and' operator short circuits in the expected way.
    assertEq(false and counterGet() = 1, false, 'and short circuits #1')
    assertEq(counterGet(), 1, 'and short circuits #2')
    assertEq(true and counterGet() = 2, true, 'and short circuits #3')
    assertEq(counterGet(), 3, 'and short circuits #4')

    // The 'or' operator short circuits in the expected way.
    nCounter := 0
    assertEq(true or counterGet() = 1, true, 'or short circuits #1')
    assertEq(counterGet(), 1, 'or short circuits #2')
    assertEq(false or counterGet() = 2, true, 'or short circuits #3')
    assertEq(counterGet(), 3, 'or short circuits #4')
}


// Code to manage running our tests.
var nTests := 0
var nErrors := 0
var showPassedTest := true

function pass(message) {
    nTests := nTests + 1
    write('[OK] "', message, '"\n')
}

function fail(message) {
    nTests := nTests + 1
    nErrors := nErrors + 1
    write('[FAILED] "', message, '"\n')
}

function assert(condition, message) {
    if not condition {
        fail(message)
    } else if showPassedTest {
        pass(message)
    }
}

function assertEq(test, expected, message) {
    nTests := nTests + 1
    if test <> expected {
        write('[FAILED] "', message, '": expected <', expected, '> got <',
            test, '>\n')
        nErrors := nErrors + 1
    }
    else if showPassedTest {
        write('[OK] "', message, '"\n')
    }
}

function displaySummary() {
    write('\n', nTests - nErrors, ' out of ', nTests, ' tests passed.\n')
    write('There are ', nErrors, ' errors. ')
    write(if nErrors = 0 { ':-)' } else { 'D-:' }, '\n')
}

function doAllTests() {
    testLiterals()
    testOperators()
    testVariablesAndBlocks()
    testGlobalVariables()
    testBranching()
    testLooping()
    testFunctions()
    testLogicalAndOr()

    displaySummary()
}

doAllTests()
