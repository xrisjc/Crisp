///////////////////////////////////////////////////////////////////////////////
// File: Test.crisp
// Purpose: Integration testing of Crisp functionality that also serves as a
// guide to Crips (for now).
///////////////////////////////////////////////////////////////////////////////

//
// As you might have guessed, // starts a comment.  As per usual, comments are
// ignored and end when a new line character is reached.
//
// All other whitespace is ignored, so your free to format code as you see
// fit.
//
// Oh, and one more thing before we begin, everthing is an expression.
// Everthing.  But expressions can have side effects, so it's not "pure"
// expressions.
//

///////////////////////////////////////////////////////////////////////////////
// Let's setup some code to help us do tests, and keep track of how many
// errors occur.
///////////////////////////////////////////////////////////////////////////////

let nTests := 0
let nErrors := 0

fn assert(condition, message) {
    nTests := nTests + 1
    if condition {
        writeLn('[OK] ', message)
    } else { 
        writeLn('[FAILED] ', message)
        nErrors := nErrors + 1
    }
}

fn assertEq(test, expected, message) {
    nTests := nTests + 1
    if (test = expected) {
        writeLn('[OK] ', message)
    } else {
        writeLn('[FAILED] ', message)
        writeLn('expected ', expected, ' got ', test)
        nErrors := nErrors + 1
    }
}

fn displaySummary() {
    writeLn()
    writeLn(nTests - nErrors, ' out of ', nTests, ' tests passed.')
    writeLn('There are ', nErrors, ' errors. ', if nErrors=0 ':-)' else 'D-:')
}


///////////////////////////////////////////////////////////////////////////////
// Basic Literals
///////////////////////////////////////////////////////////////////////////////

// Crisp has the literal expressions you would expect.

// Strings are delimited by single quotes. The are the .NET string type
// internally.
assertEq('hi', 'hi', 'string literal')

// Number values are double (64 bit floating point) internally.
assertEq(123, 123, 'int number literal')

// Boolean values are given by keywords true and false representing the
// obvious values.  The are represented by the bool type internally.
assert(true, 'true literal')
assertEq(false, false, 'false literal')

// The keyword null evaluates to the null object value, which is a singleton
// value that is not equal to any other value.
assertEq(null, null, 'null literal')


///////////////////////////////////////////////////////////////////////////////
// Arithmetic Operators
///////////////////////////////////////////////////////////////////////////////

// After literals, more complex expressions can be created with operators.

// Crisp has the usual arithmetic operators.
assertEq( 1 + 2, 3, 'addition'      )
assertEq( 5 - 2, 3, 'subtraction'   )
assertEq( 2 * 3, 6, 'multiplication')
assertEq(12 % 5, 2, 'modulo'        )
assertEq(15 / 5, 3, 'division'      )

// The arithmetic operators have the usual precedence levels.
assertEq(1  +  2 * 3, 7, 'addition and multiplication'    )
assertEq(10 -  2 * 3, 4, 'subtraction and multiplication' )
assertEq(1  + 15 / 3, 6, 'addition and division'          )
assertEq(1  +  8 % 3, 3, 'addition and modulo'            )

// But, grouping with parenthesis will change order of evaluation, as you
// would expected.
assertEq((1  + 2) * 3,  9, 'addition grouped and multiplication'    )
assertEq((10 - 2) * 3, 24, 'subtraction grouped and multiplication' )


///////////////////////////////////////////////////////////////////////////////
// Relationl Operators
///////////////////////////////////////////////////////////////////////////////

// All relation operators evaluate to a boolean value.

// The equal operator is a single =.
assertEq(    1 = 1    , true  , 'number equality true')
assertEq(    1 = 2    , false , 'number equality false')
assertEq(false = false, true  , 'bool equality true')
assertEq(false = true , false , 'bool equality false')
assertEq('hey' = 'hey', true  , 'string equality true')
assertEq('hey' = 'HEY', false , 'string equality false')

// = is a strict equality operator. There are no conversions done.
assertEq(false = 0, false, 'false and zero are not equal')

// null is equal to itself but not to other values.
assert(null = null, 'null equals itself')
assertEq(null = 0, false, 'null and zero are not equal')

// <> is the inequality operator
assertEq(    1 <> 1    , false , 'number inequality false')
assertEq(    1 <> 2    , true  , 'number inequality true')
assertEq(false <> false, false , 'bool inequality false')
assertEq(false <> true , true  , 'bool inequality true')
assertEq('hey' <> 'hey', false , 'string inequality false')
assertEq('hey' <> 'HEY', true  , 'string inequality true')

// <> is also a strict inequality operator. There are no conversions done.
assertEq(false <> 0, true, 'false and zero are inequal')


///////////////////////////////////////////////////////////////////////////////
// Variables Blocks
///////////////////////////////////////////////////////////////////////////////

// Variables are declared with the keyword "let" and the assignment operator:
// ":=".  A variable must be declared before it is used or else there will be
// a runtime error.
//
// Right now variable identifiers can only be upper or lower case letters.

let x := 123
assertEq(x, 123, 'variable declaration')
// TODO: Add test for runtime error.

// A variable may be updated with the assignment operator.
x := x + 1
assertEq(x, 124, 'variable assignment')

// Assignments are an expression that return the value assinged to the
// variable.
assertEq(x := 2 * x, 248, 'assignment expression value')

//
// "{" and "}" delimit a block.  Within a block mulitple expressions can
// be listed.  Each expression is evaluated in the order they are found.  All
// expression values are ignored, except the last one.  The last expression
// is the result of the the last expression.  The ignored expressions usually
// will be useful for their side effects.
//
// Crisp has no token to mark the end of an expression, not even new lines.
// An expression ends when the next token can't be connected with the
// current expression.  In the example below we have the expression 5*6 with
// the next token 2.  Since 2 is not a token that can be used to extend the
// 5*6 expression, the expression parsing stops.  For the last expression a
// similar things happens with the } token.  It can't be used to continue the
// 1+2 expression.
//
assertEq( { 5*6  1+2 } , 3, 'Block expression return value')

// Blocks can contain one expression.
assertEq( { 2+3 }, 5, 'Single expression block.')

// Empty blocks do nothing but return null.
assertEq( { } , null, 'Empty block')

// blocks also introduce a new scope for variable declarations.  You can 
// "shadow" variables in outer scopes.
{
    let y := 100
    let x := 2 * y
    assertEq(y, 100, 'block variable')
    assertEq(x, 200, 'block variable shadowing')
}
assertEq(x, 248, 'variable unshadowed')
// TODO: Test that y is undefined here.

///////////////////////////////////////////////////////////////////////////////
// Branching
///////////////////////////////////////////////////////////////////////////////

// The usual if / else is present.  The syntax is either
//     if <condition> <consequent>
// or
//     if <condition> <consequent> else <alternative>
//
// The <condtion> expresion *must* be a Boolean value or else there will be a
// runtime exception.

// if / else can be used as an expression.  
assertEq(if true 123, 123, 'If true expression')

// If there is no else and the condition expression is false, then the result
// is null.
assertEq(if false 123, null, 'If false expression')

// If there is an else, and the condition expression is false, then the result
// is the alternative expression.
assertEq(if false 123 else 321, 321, 'If / else false expression')

// Any valid expression can go in the condition, consequent, and alternative.
assertEq(
    if { let result:=1+2  result=3 }
        { let x:=4 let y:=2  x*y} 
    else
       'this will not be the result',
    8,
    'If / else expressions')

///////////////////////////////////////////////////////////////////////////////
// Looping
///////////////////////////////////////////////////////////////////////////////

// The ususal while loop is present.  The syntax is
//     while <condition> <body>
// 
// The <condtion> expresion *must* be a Boolean value or else there will be a
// runtime exception.  Like if / else, condition and body can be any valid
// kind of expression.
// 
{
    let sum := 0
    let n := 1
    while n = 101 = false {
        sum := sum + n
        n := n + 1
    }
    assertEq(sum, 5050, 'While loop')
}

// As usual while loops can fail to run at all.
{
    let n := 100
    while false
        n := n + 1
    assertEq(n, 100, 'Never executing while loop')
}

// A while always evaluates to null.
assertEq(while false { 0 }, null, 'While evals to null')

///////////////////////////////////////////////////////////////////////////////
// Functions
///////////////////////////////////////////////////////////////////////////////

// The syntax for a function "literal" is
//   fn (<comma seperated parameters>) <body>
//
// () is the "invocation" operator. The returns values is the result of the
// body expression, which can be any valid expression including a block.


// Functions are values and can be anonymous and immediately invoked.
assertEq( (fn (x, y) x*y)(100, 200), 20000, 'Inline function' )

// Since functions are values they can be assigned to variables and invoked
// with ().
let square := fn (x) { x * x }
assertEq(square(3), 9, 'Function assigned to variable')

// A syntactic shortcut for assigning to a variable is to just put the variable
// name between fn and the parameters
fn divides(m, n) {
    let remainder := n % m
    remainder = 0
}
assertEq(divides(5, 35), true, 'Named functions')

// Functions are also closures.  Here's the standard counter function example.
fn makeCounter() {
    let x := 0
    fn () {
        x := x + 1
        x
    }
}
let counter := makeCounter()
assertEq({counter() counter() counter()}, 3, 'Functions with closures')

displaySummary()

