///////////////////////////////////////////////////////////////////////////////
// File: Test.crisp
// Purpose: Integration testing of Crisp functionality that also serves as a
// guide to Crips (for now).
///////////////////////////////////////////////////////////////////////////////

//
// As you might have guessed, // starts a comment.  As per usual, comments are
// ignored and end when a new line character is reached.
//
// All other whitespace is ignored, so your free to format code as you see
// fit.
//
// Oh, and one more thing before we begin, everthing is an expression.
// Everthing.  But expressions can have side effects, so it's not "pure"
// expressions.
//

///////////////////////////////////////////////////////////////////////////////
// Let's setup some code to help us do tests, and keep track of how many
// errors occur.
///////////////////////////////////////////////////////////////////////////////

let nTests := 0
let nErrors := 0
let showPassedTest := true

fn assert(condition, message)
  begin
    nTests := nTests + 1
    if condition = false then
      begin
        writeLn('[FAILED] "', message, '"')
        nErrors := nErrors + 1
      end
    else if showPassedTest then
        writeLn('[OK] "', message, '"')
  end

fn assertEq(test, expected, message)
  begin
    nTests := nTests + 1
    if test <> expected then
      begin
        writeLn('[FAILED] "', message, '": expected <', expected, '> got <',
            test, '>')
        nErrors := nErrors + 1
      end
    else if showPassedTest then
        writeLn('[OK] "', message, '"')
  end

fn displaySummary()
  begin
    writeLn()
    writeLn(nTests - nErrors, ' out of ', nTests, ' tests passed.')
    writeLn('There are ', nErrors, ' errors. ',
        if nErrors=0 then ':-)' else 'D-:')
  end


///////////////////////////////////////////////////////////////////////////////
// Basic Literals
///////////////////////////////////////////////////////////////////////////////

// Crisp has the literal expressions you would expect.

// Strings are delimited by single quotes. The are the .NET string type
// internally.
assertEq('hi', 'hi', 'string literal')

// Number values are 32 bit integers or 64 bit floating point numbers.
assertEq(123, 123, 'int number literal')
assertEq(1., 1.0, 'floating point #1')
assertEq(1.5, 1.5, 'floating point #2')

// Boolean values are given by keywords true and false representing the
// obvious values.  The are represented by the bool type internally.
assert(true, 'true literal')
assertEq(false, false, 'false literal')

// The keyword null evaluates to the null object value, which is a singleton
// value that is not equal to any other value.
assertEq(null, null, 'null literal')


///////////////////////////////////////////////////////////////////////////////
// Arithmetic Operators
///////////////////////////////////////////////////////////////////////////////

// After literals, more complex expressions can be created with operators.

// Crisp has the usual arithmetic operators for integer and floating point
// values.
assertEq(1 + 2,  3, 'integer addition')
assertEq(5 - 2,  3, 'integer subtraction')
assertEq(2 * 3,  6, 'integer multiplication')
assertEq(12 mod 5, 2, 'integer modulo')
assertEq(15 / 5, 3, 'integer division #1')
assertEq(1 / 2,  0, 'integer division #2')
assertEq(-2, 2-4, 'integer negation')

assertEq(1.0 + 2.5,  3.5, 'floating point addition')
assertEq(5.5 - 2.0,  3.5, 'floating point subtraction')
assertEq(2.5 * 3.0,  7.5, 'floating point multiplication')
assertEq(12.5 mod 5.0, 2.5, 'floating point modulo')
assertEq(15.0 / 5.0, 3.0, 'floating point division #1')
assertEq(1.0 / 2.0,  0.5, 'floating point division #2')
assertEq(-0.5, 0.5-1.0, 'floating point negation')

// Integer and floating point can be combined. The integer  value will be
// converted into a floating point, and the result will be floating point.
assertEq(1 + 2.5,   3.5, 'int left float right addition')
assertEq(5 - 2.5,   2.5, 'int left float right subtraction')
assertEq(3 * 3.5,  10.5, 'int left float right multiplication')
assertEq(6 mod 5.5,   0.5, 'int left float right modulo')
assertEq(15 / 5.0,  3.0, 'int left float right division #1')
assertEq(1 / 2.0,   0.5, 'int left float right division #2')

assertEq(1.5 + 2,   3.5, 'float left int right addition')
assertEq(4.5 - 2,   2.5, 'float left int right subtraction')
assertEq(3.5 * 3,  10.5, 'float left int right multiplication')
assertEq(5.5 mod 5,   0.5, 'float left int right modulo')
assertEq(15.0 / 5,  3.0, 'float left int right division #1')
assertEq(1.0 / 2,   0.5, 'float left int right division #2')

// The arithmetic operators have the usual precedence levels.
assertEq(1 + 2 * 3,  7, 'addition and multiplication')
assertEq(10 - 2 * 3, 4, 'subtraction and multiplication')
assertEq(1 + 15 / 3, 6, 'addition and division')
assertEq(1 + 8 mod 3,  3, 'addition and modulo')

// But, grouping with parenthesis will change order of evaluation, as you
// would expected.
assertEq((1 + 2) * 3,   9, 'addition grouped and multiplication')
assertEq((10 - 2) * 3, 24, 'subtraction grouped and multiplication')

///////////////////////////////////////////////////////////////////////////////
// String Operators
///////////////////////////////////////////////////////////////////////////////

// + also concats strings
assertEq('first ' + 'second', 'first second', 'string concat')

// string also can be indexed (zero-based).
assertEq('first'[1], 'i', 'string indexing')

///////////////////////////////////////////////////////////////////////////////
// Equality, Inequality, Relational, and Logical
///////////////////////////////////////////////////////////////////////////////

// All relation operators evaluate to a boolean value.

// The equal operator is a single =.
assertEq(1 = 1,          true, 'int equality true')
assertEq(1 = 2,         false, 'int equality false')
assertEq(1.5 = 1.5,      true, 'float equality true')
assertEq(1.5 = 2.0,     false, 'float equality false')
assertEq(false = false,  true, 'bool equality true')
assertEq(false = true , false, 'bool equality false')
assertEq('hey' = 'hey',  true, 'string equality true')
assertEq('hey' = 'HEY', false, 'string equality false')

// = is a strict equality operator. There are no conversions done.
assertEq(false = 0, false, 'false and zero are not equal')

// null is equal to itself but not to other values.
assert(null = null, 'null equals itself')
assertEq(null = 0, false, 'null and zero are not equal')

// <> is the inequality operator
assertEq(1 <> 1,         false, 'int inequality false')
assertEq(1 <> 2,          true, 'int inequality true')
assertEq(1.5 <> 1.5,     false, 'float inequality false')
assertEq(1.5 <> 2.0,      true, 'float inequality true')
assertEq(false <> false, false, 'bool inequality false')
assertEq(false <> true ,  true, 'bool inequality true')
assertEq('hey' <> 'hey', false, 'string inequality false')
assertEq('hey' <> 'HEY',  true, 'string inequality true')

// <> is also a strict inequality operator. There are no conversions done.
assertEq(false <> 0, true, 'false and zero are inequal')

// Exception! Integers are converted into floating points when testing against
// another floating point.
assertEq(1 = 1.0,   true, 'int right float left equality true')
assertEq(1 = 1.5,  false, 'int right float left equality false')
assertEq(1.5 <> 1,  true, 'float right int left inequality true')
assertEq(1.0 <> 1, false, 'float right int left inequality false')

// = and <> are lower than arithmatic in precedence.
assertEq(1  +  2 * 3 = 7, true, '= precedence')
assertEq(1  +  2 * 3 <> 9, true, '<> precedence')

// There are also the normal relational operators.  These only work for
// number valued objects.
assertEq(1 < 2,   true, 'Int less than #1')
assertEq(2 < 2,  false, 'Int less than #2')
assertEq(1 <= 2,  true, 'Int less than or equal #1')
assertEq(2 <= 2,  true, 'Int less than or equal #2')
assertEq(3 <= 2, false, 'Int less than or equal #3')
assertEq(3 > 2,   true, 'Int greater than #1')
assertEq(1 > 2,  false, 'Int greater than #2')
assertEq(3 >= 2,  true, 'Int greater than or equal #1')
assertEq(3 >= 3,  true, 'Int greater than or equal #2')
assertEq(3 >= 4, false, 'Int greater than or equal #3')

assertEq(1.5 < 2.0,   true, 'Float less than #1')
assertEq(2.0 < 2.0,  false, 'Float less than #2')
assertEq(1.5 <= 2.0,  true, 'Float less than or equal #1')
assertEq(2.0 <= 2.0,  true, 'Float less than or equal #2')
assertEq(3.0 <= 2.5, false, 'Float less than or equal #3')
assertEq(3.0 > 2.5,   true, 'Float greater than #1')
assertEq(1.5 > 2.0,  false, 'Float greater than #2')
assertEq(3.0 >= 2.5,  true, 'Float greater than or equal #1')
assertEq(3.5 >= 3.5,  true, 'Float greater than or equal #2')
assertEq(3.5 >= 4.0, false, 'Float greater than or equal #3')

// As with arithmetic and equality, mixing integer and floating point values
// in relational operators will convert the integer to a floating point.
assertEq(1 < 2.5,   true, 'Int left float right less than #1')
assertEq(2 < 2.0,  false, 'Int left float right less than #2')
assertEq(1 <= 2.0,  true, 'Int left float right less than or equal #1')
assertEq(2 <= 2.0,  true, 'Int left float right less than or equal #2')
assertEq(3 <= 2.5, false, 'Int left float right less than or equal #3')
assertEq(3 > 2.5,   true, 'Int left float right greater than #1')
assertEq(1 > 2.0,  false, 'Int left float right greater than #2')
assertEq(3 >= 2.5,  true, 'Int left float right greater than or equal #1')
assertEq(3 >= 3.0,  true, 'Int left float right greater than or equal #2')
assertEq(3 >= 4.0, false, 'Int left float right greater than or equal #3')

assertEq(1.5 < 2,   true, 'Float left int right less than #1')
assertEq(2.0 < 2,  false, 'Float left int right less than #2')
assertEq(1.5 <= 2,  true, 'Float left int right less than or equal #1')
assertEq(2.0 <= 2,  true, 'Float left int right less than or equal #2')
assertEq(3.0 <= 2, false, 'Float left int right less than or equal #3')
assertEq(3.0 > 2,   true, 'Float left int right greater than #1')
assertEq(1.5 > 2,  false, 'Float left int right greater than #2')
assertEq(3.0 >= 2,  true, 'Float left int right greater than or equal #1')
assertEq(3.0 >= 3,  true, 'Float left int right greater than or equal #2')
assertEq(3.5 >= 4, false, 'Float left int right greater than or equal #3')

// Relational operators have higher precedence over equality operators
assert(1 <  2 = 2 >  1, 'Equal / relational precedence #1')
assert(1 <= 2 = 2 >= 1, 'Equal / relational precedence #2')
assert(2 >  1 = 1 <  2, 'Equal / relational precedence #3')
assert(2 >= 1 = 1 <= 2, 'Equal / relational precedence #4')

// The logical operators are 'and', 'or' and 'not'.
assertEq(true  and true,  true,  'And #1')
assertEq(true  and false, false, 'And #2')
assertEq(false and true,  false, 'And #3')
assertEq(false and false, false, 'And #4')

assertEq(true  or true,  true,  'Or #1')
assertEq(true  or false, true,  'Or #2')
assertEq(false or true,  true,  'Or #3')
assertEq(false or false, false, 'Or #4')

assertEq(not true, false, 'Not #1')
assertEq(not false, true, 'Not #2')

// Logical and has lower precedence than equality and inequality.
assert(1 <> 2 and 2 = 2, 'and precedence #1')
assert(2 = 2 and 1 <> 2, 'and precedence #2')

// 'or' is lower in precedence than 'and'.
assertEq(true or false and false, true, 'or precedence #1')
assertEq((true or false) and false, false, 'or precedence #1')

///////////////////////////////////////////////////////////////////////////////
// Variables Blocks
///////////////////////////////////////////////////////////////////////////////

// Variables are declared with the keyword "let" and the assignment operator:
// ":=".  A variable must be declared before it is used or else there will be
// a runtime error.
//
// Right now variable identifiers can only be upper or lower case letters.

let x := 123
assertEq(x, 123, 'variable declaration')
// TODO: Add test for runtime error.

// A variable may be updated with the assignment operator.
x := x + 1
assertEq(x, 124, 'variable assignment')

// Assignments are an expression that return the value assinged to the
// variable.
assertEq(x := 2 * x, 248, 'assignment expression value')

//
// begin and end delimit a block.  Within a block mulitple expressions can
// be listed.  Each expression is evaluated in the order they are found.  All
// expression values are ignored, except the last one.  The last expression
// is the result of the the last expression.  The ignored expressions usually
// will be useful for their side effects.
//
// Crisp has no token to mark the end of an expression, not even new lines.
// An expression ends when the next token can't be connected with the
// current expression.  In the example below we have the expression 5*6 with
// the next token 2.  Since 2 is not a token that can be used to extend the
// 5*6 expression, the expression parsing stops.  For the last expression a
// similar things happens with the end token.  It can't be used to continue
// the 1+2 expression.
//
assertEq( begin 5*6  1+2 end , 3, 'Block expression return value')

// Blocks can contain one expression.
assertEq( begin 2+3 end, 5, 'Single expression block.')

// Empty blocks do nothing but return null.
assertEq( begin end , null, 'Empty block')

// blocks also introduce a new scope for variable declarations.  You can 
// "shadow" variables in outer scopes.
begin
    let y := 100
    let x := 2 * y
    assertEq(y, 100, 'block variable')
    assertEq(x, 200, 'block variable shadowing')
end
assertEq(x, 248, 'variable unshadowed')
// TODO: Test that y is undefined here.

///////////////////////////////////////////////////////////////////////////////
// Branching
///////////////////////////////////////////////////////////////////////////////

// The usual if / else is present.  The syntax is either
//     if <condition> then <consequent>
// or
//     if <condition> then <consequent> else <alternative>
//
// The <condtion> expresion *must* be a Boolean value or else there will be a
// runtime exception.

// if / else can be used as an expression.  
assertEq(if true then 123, 123, 'If true expression')

// If there is no else and the condition expression is false, then the result
// is null.
assertEq(if false then 123, null, 'If false expression')

// If there is an else, and the condition expression is false, then the result
// is the alternative expression.
assertEq(if false then 123 else 321, 321, 'If / else false expression')

// Any valid expression can go in the condition, consequent, and alternative.
assertEq(
    if begin let result:=1+2  result=3 end then
        begin let x:=4 let y:=2  x*y end 
    else
       'this will not be the result',
    8,
    'If / else expressions')

// Else binds to the nearest if, as is usual.
assertEq(if true then if false then 'A' else 'B', 'B', 'Else binding #1')
assertEq(if false then if false then 'A' else 'B', null, 'Else binding #2')

///////////////////////////////////////////////////////////////////////////////
// Looping
///////////////////////////////////////////////////////////////////////////////

// The ususal while loop is present.  The syntax is
//     while <condition> do <body>
// 
// The <condtion> expresion *must* be a Boolean value or else there will be a
// runtime exception.  Like if / else, condition and body can be any valid
// kind of expression.
// 
begin
    let sum := 0
    let n := 1
    while n <= 100 do
      begin
        sum := sum + n
        n := n + 1
      end
    assertEq(sum, 5050, 'While loop')
end


// As usual while loops can fail to run at all.
begin
    let n := 100
    while false do
        n := n + 1
    assertEq(n, 100, 'Never executing while loop')
end

// A while always evaluates to null.
assertEq(while false do 0, null, 'While evals to null')

///////////////////////////////////////////////////////////////////////////////
// Functions
///////////////////////////////////////////////////////////////////////////////

// The syntax for a function "literal" is
//   fn (<comma seperated parameters>) <body>
//
// () is the "invocation" operator. The returns values is the result of the
// body expression, which can be any valid expression including a block.


// Functions are values and can be anonymous and immediately invoked.
assertEq( (fn (x, y) x*y)(100, 200), 20000, 'Inline function' )

// Since functions are values they can be assigned to variables and invoked
// with ().
let square := fn (x) x * x
assertEq(square(3), 9, 'Function assigned to variable')

// A syntactic shortcut for assigning to a variable is to just put the variable
// name between fn and the parameters
fn divides(m, n)
  begin
    let remainder := n mod m
    remainder = 0
  end
assertEq(divides(5, 35), true, 'Named functions')

// Functions are also closures.  Here's the standard counter function example.
fn makeCounter()
  begin
    let x := 0
    fn ()
      begin
        x := x + 1
        x
      end
  end
let counter := makeCounter()
assertEq(begin counter() counter() counter() end, 3, 'Functions with closures')

///////////////////////////////////////////////////////////////////////////////
// More Logical
///////////////////////////////////////////////////////////////////////////////

// The 'and' operator short circuits in the expected way.
counter := makeCounter()
assertEq(false and counter() = 1, false, 'and short circuits #1')
assertEq(counter(), 1, 'and short circuits #2')
assertEq(true and counter() = 2, true, 'and short circuits #3')
assertEq(counter(), 3, 'and short circuits #4')

// The 'or' operator short circuits in the expected way.
counter := makeCounter()
assertEq(true or counter() = 1, true, 'or short circuits #1')
assertEq(counter(), 1, 'or short circuits #2')
assertEq(false or counter() = 2, true, 'or short circuits #3')
assertEq(counter(), 3, 'or short circuits #4')

///////////////////////////////////////////////////////////////////////////////
// Maps
///////////////////////////////////////////////////////////////////////////////

// Maps are constructed with { and }. { } is an empty map.  [ and ] are used
// to index the map, in the usual way, to assign a value to a key and get the
// value for a key.
begin
    fn g(x) x / 2
    let m := { }
    let map := { }
    map['year'] := 2018
    map[90 * 100] := 'number that it is over'
    map[0.5] := 'one half'
    map[true] := 0.5
    map[false] := fn (x) 2 * x
    map[null] := 'null is an object'
    map[g] := 'fn that halves'
    map[m] := null
    assertEq(map['year'], 2018, 'map get / set value #1')
    assertEq(map[9 * 1000], 'number that it is over', 'map get / set value #2')
    assertEq(map[0.5], 'one half', 'map get / set value #3')
    assertEq(map[true],  0.5, 'map get /set #4')
    assertEq(map[false](3), 6, 'map get / set #5')
    assertEq(map[null], 'null is an object', 'map get / set #6')
    assertEq(map[g], 'fn that halves', 'map get / set #7')
    assertEq(map[m], null, 'map get / set #8')
end

// You can also initilize a map all at once as shown below.  Seperate the 
// indexes and the values by a colon.
begin
    fn g(x) x / 2
    let m := { }
    let map :=
    {
        'year': 2018
        90 * 100: 'number that it is over'
        0.5: 'one half'
        true: 0.5
        false: fn (x) 2 * x
        null: 'null is an object'
        g: 'fn that halves'
        m: null
    }
    assertEq(map['year'], 2018, 'map get / set value #9')
    assertEq(map[9 * 1000], 'number that it is over', 'map get / set value #10')
    assertEq(map[0.5], 'one half', 'map get / set value #11')
    assertEq(map[true],  0.5, 'map get /set #12')
    assertEq(map[false](3), 6, 'map get / set #13')
    assertEq(map[null], 'null is an object', 'map get / set #14')
    assertEq(map[g], 'fn that halves', 'map get / set #15')
    assertEq(map[m], null, 'map get / set #16')
end

///////////////////////////////////////////////////////////////////////////////
// The End
///////////////////////////////////////////////////////////////////////////////

displaySummary()

